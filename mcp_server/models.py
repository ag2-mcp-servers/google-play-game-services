# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:10:38+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class AchievementType(Enum):
    ACHIEVEMENT_TYPE_UNSPECIFIED = 'ACHIEVEMENT_TYPE_UNSPECIFIED'
    STANDARD = 'STANDARD'
    INCREMENTAL = 'INCREMENTAL'


class InitialState(Enum):
    INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED = 'INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED'
    HIDDEN = 'HIDDEN'
    REVEALED = 'REVEALED'
    UNLOCKED = 'UNLOCKED'


class AchievementDefinition(BaseModel):
    achievementType: Optional[AchievementType] = Field(
        None, description='The type of the achievement.'
    )
    description: Optional[str] = Field(
        None, description='The description of the achievement.'
    )
    experiencePoints: Optional[str] = Field(
        None,
        description='Experience points which will be earned when unlocking this achievement.',
    )
    formattedTotalSteps: Optional[str] = Field(
        None, description='The total steps for an incremental achievement as a string.'
    )
    id: Optional[str] = Field(None, description='The ID of the achievement.')
    initialState: Optional[InitialState] = Field(
        None, description='The initial state of the achievement.'
    )
    isRevealedIconUrlDefault: Optional[bool] = Field(
        None,
        description='Indicates whether the revealed icon image being returned is a default image, or is provided by the game.',
    )
    isUnlockedIconUrlDefault: Optional[bool] = Field(
        None,
        description='Indicates whether the unlocked icon image being returned is a default image, or is game-provided.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.',
    )
    name: Optional[str] = Field(None, description='The name of the achievement.')
    revealedIconUrl: Optional[str] = Field(
        None, description='The image URL for the revealed achievement icon.'
    )
    totalSteps: Optional[int] = Field(
        None, description='The total steps for an incremental achievement.'
    )
    unlockedIconUrl: Optional[str] = Field(
        None, description='The image URL for the unlocked achievement icon.'
    )


class AchievementDefinitionsListResponse(BaseModel):
    items: Optional[List[AchievementDefinition]] = Field(
        None, description='The achievement definitions.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinitionsListResponse`.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token corresponding to the next page of results.'
    )


class AchievementIncrementResponse(BaseModel):
    currentSteps: Optional[int] = Field(
        None, description='The current steps recorded for this incremental achievement.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementIncrementResponse`.',
    )
    newlyUnlocked: Optional[bool] = Field(
        None,
        description='Whether the current steps for the achievement has reached the number of steps required to unlock.',
    )


class CurrentState(Enum):
    REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED = 'REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED'
    REVEALED = 'REVEALED'
    UNLOCKED = 'UNLOCKED'


class AchievementRevealResponse(BaseModel):
    currentState: Optional[CurrentState] = Field(
        None,
        description='The current state of the achievement for which a reveal was attempted. This might be `UNLOCKED` if the achievement was already unlocked.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementRevealResponse`.',
    )


class AchievementSetStepsAtLeastResponse(BaseModel):
    currentSteps: Optional[int] = Field(
        None, description='The current steps recorded for this incremental achievement.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementSetStepsAtLeastResponse`.',
    )
    newlyUnlocked: Optional[bool] = Field(
        None,
        description='Whether the current steps for the achievement has reached the number of steps required to unlock.',
    )


class AchievementUnlockResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUnlockResponse`.',
    )
    newlyUnlocked: Optional[bool] = Field(
        None,
        description='Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).',
    )


class UpdateType(Enum):
    ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED = 'ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED'
    REVEAL = 'REVEAL'
    UNLOCK = 'UNLOCK'
    INCREMENT = 'INCREMENT'
    SET_STEPS_AT_LEAST = 'SET_STEPS_AT_LEAST'


class CurrentState1(Enum):
    UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED = 'UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED'
    HIDDEN = 'HIDDEN'
    REVEALED = 'REVEALED'
    UNLOCKED = 'UNLOCKED'


class AchievementUpdateResponse(BaseModel):
    achievementId: Optional[str] = Field(
        None, description='The achievement this update is was applied to.'
    )
    currentState: Optional[CurrentState1] = Field(
        None, description='The current state of the achievement.'
    )
    currentSteps: Optional[int] = Field(
        None,
        description='The current steps recorded for this achievement if it is incremental.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`.',
    )
    newlyUnlocked: Optional[bool] = Field(
        None,
        description='Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).',
    )
    updateOccurred: Optional[bool] = Field(
        None,
        description='Whether the requested updates actually affected the achievement.',
    )


class EnabledFeature(Enum):
    APPLICATION_FEATURE_UNSPECIFIED = 'APPLICATION_FEATURE_UNSPECIFIED'
    SNAPSHOTS = 'SNAPSHOTS'


class ApplicationCategory(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationCategory`.',
    )
    primary: Optional[str] = Field(None, description='The primary category.')
    secondary: Optional[str] = Field(None, description='The secondary category.')


class ApplicationPlayerId(BaseModel):
    applicationId: Optional[str] = Field(
        None, description='The application that this player identifier is for.'
    )
    playerId: Optional[str] = Field(
        None, description='The player identifier for the application.'
    )


class ApplicationVerifyResponse(BaseModel):
    alternate_player_id: Optional[str] = Field(
        None,
        description='An alternate ID that was once used for the player that was issued the auth token used in this request. (This field is not normally populated.)',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationVerifyResponse`.',
    )
    player_id: Optional[str] = Field(
        None,
        description='The ID of the player that was issued the auth token used in this request.',
    )


class Category(BaseModel):
    category: Optional[str] = Field(None, description='The category name.')
    experiencePoints: Optional[str] = Field(
        None, description='Experience points earned in this category.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#category`.',
    )


class CategoryListResponse(BaseModel):
    items: Optional[List[Category]] = Field(
        None, description='The list of categories with usage data.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#categoryListResponse`.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token corresponding to the next page of results.'
    )


class EndPoint(BaseModel):
    url: Optional[str] = Field(
        None,
        description='A URL suitable for loading in a web browser for the requested endpoint.',
    )


class FailureCause(Enum):
    EVENT_FAILURE_CAUSE_UNSPECIFIED = 'EVENT_FAILURE_CAUSE_UNSPECIFIED'
    TOO_LARGE = 'TOO_LARGE'
    TIME_PERIOD_EXPIRED = 'TIME_PERIOD_EXPIRED'
    TIME_PERIOD_SHORT = 'TIME_PERIOD_SHORT'
    TIME_PERIOD_LONG = 'TIME_PERIOD_LONG'
    ALREADY_UPDATED = 'ALREADY_UPDATED'
    RECORD_RATE_HIGH = 'RECORD_RATE_HIGH'


class EventChild(BaseModel):
    childId: Optional[str] = Field(None, description='The ID of the child event.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventChild`.',
    )


class Visibility(Enum):
    EVENT_VISIBILITY_UNSPECIFIED = 'EVENT_VISIBILITY_UNSPECIFIED'
    REVEALED = 'REVEALED'
    HIDDEN = 'HIDDEN'


class EventDefinition(BaseModel):
    childEvents: Optional[List[EventChild]] = Field(
        None, description='A list of events that are a child of this event.'
    )
    description: Optional[str] = Field(
        None, description='Description of what this event represents.'
    )
    displayName: Optional[str] = Field(
        None, description='The name to display for the event.'
    )
    id: Optional[str] = Field(None, description='The ID of the event.')
    imageUrl: Optional[str] = Field(
        None, description='The base URL for the image that represents the event.'
    )
    isDefaultImageUrl: Optional[bool] = Field(
        None,
        description='Indicates whether the icon image being returned is a default image, or is game-provided.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`.',
    )
    visibility: Optional[Visibility] = Field(
        None, description='The visibility of event being tracked in this definition.'
    )


class EventDefinitionListResponse(BaseModel):
    items: Optional[List[EventDefinition]] = Field(
        None, description='The event definitions.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinitionListResponse`.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The pagination token for the next page of results.'
    )


class EventPeriodRange(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodRange`.',
    )
    periodEndMillis: Optional[str] = Field(
        None,
        description='The time when this update period ends, in millis, since 1970 UTC (Unix Epoch).',
    )
    periodStartMillis: Optional[str] = Field(
        None,
        description='The time when this update period begins, in millis, since 1970 UTC (Unix Epoch).',
    )


class FailureCause1(Enum):
    EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED = 'EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED'
    NOT_FOUND = 'NOT_FOUND'
    INVALID_UPDATE_VALUE = 'INVALID_UPDATE_VALUE'


class EventRecordFailure(BaseModel):
    eventId: Optional[str] = Field(
        None, description='The ID of the event that was not updated.'
    )
    failureCause: Optional[FailureCause1] = Field(
        None, description='The cause for the update failure.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordFailure`.',
    )


class EventUpdateRequest(BaseModel):
    definitionId: Optional[str] = Field(
        None, description='The ID of the event being modified in this update.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateRequest`.',
    )
    updateCount: Optional[str] = Field(
        None, description='The number of times this event occurred in this time period.'
    )


class GamesAchievementIncrement(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementIncrement`.',
    )
    requestId: Optional[str] = Field(
        None,
        description='The requestId associated with an increment to an achievement.',
    )
    steps: Optional[int] = Field(
        None, description='The number of steps to be incremented.'
    )


class GamesAchievementSetStepsAtLeast(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementSetStepsAtLeast`.',
    )
    steps: Optional[int] = Field(
        None,
        description='The minimum number of steps for the achievement to be set to.',
    )


class GetMultipleApplicationPlayerIdsResponse(BaseModel):
    playerIds: Optional[List[ApplicationPlayerId]] = Field(
        None,
        description='Output only. The requested applications along with the scoped ids for tha player, if that player has an id for the application. If not, the application is not included in the response.',
    )


class ImageAsset(BaseModel):
    height: Optional[int] = Field(None, description='The height of the asset.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#imageAsset`.',
    )
    name: Optional[str] = Field(None, description='The name of the asset.')
    url: Optional[str] = Field(None, description='The URL of the asset.')
    width: Optional[int] = Field(None, description='The width of the asset.')


class PlatformType(Enum):
    PLATFORM_TYPE_UNSPECIFIED = 'PLATFORM_TYPE_UNSPECIFIED'
    ANDROID = 'ANDROID'
    IOS = 'IOS'
    WEB_APP = 'WEB_APP'


class InstanceAndroidDetails(BaseModel):
    enablePiracyCheck: Optional[bool] = Field(
        None, description='Flag indicating whether the anti-piracy check is enabled.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceAndroidDetails`.',
    )
    packageName: Optional[str] = Field(
        None, description='Android package name which maps to Google Play URL.'
    )
    preferred: Optional[bool] = Field(
        None,
        description='Indicates that this instance is the default for new installations.',
    )


class InstanceIosDetails(BaseModel):
    bundleIdentifier: Optional[str] = Field(None, description='Bundle identifier.')
    itunesAppId: Optional[str] = Field(None, description='iTunes App ID.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceIosDetails`.',
    )
    preferredForIpad: Optional[bool] = Field(
        None,
        description='Indicates that this instance is the default for new installations on iPad devices.',
    )
    preferredForIphone: Optional[bool] = Field(
        None,
        description='Indicates that this instance is the default for new installations on iPhone devices.',
    )
    supportIpad: Optional[bool] = Field(
        None, description='Flag to indicate if this instance supports iPad.'
    )
    supportIphone: Optional[bool] = Field(
        None, description='Flag to indicate if this instance supports iPhone.'
    )


class InstanceWebDetails(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceWebDetails`.',
    )
    launchUrl: Optional[str] = Field(None, description='Launch URL for the game.')
    preferred: Optional[bool] = Field(
        None,
        description='Indicates that this instance is the default for new installations.',
    )


class Order(Enum):
    SCORE_ORDER_UNSPECIFIED = 'SCORE_ORDER_UNSPECIFIED'
    LARGER_IS_BETTER = 'LARGER_IS_BETTER'
    SMALLER_IS_BETTER = 'SMALLER_IS_BETTER'


class Leaderboard(BaseModel):
    iconUrl: Optional[str] = Field(None, description='The icon for the leaderboard.')
    id: Optional[str] = Field(None, description='The leaderboard ID.')
    isIconUrlDefault: Optional[bool] = Field(
        None,
        description='Indicates whether the icon image being returned is a default image, or is game-provided.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboard`.',
    )
    name: Optional[str] = Field(None, description='The name of the leaderboard.')
    order: Optional[Order] = Field(None, description='How scores are ordered.')


class TimeSpan(Enum):
    SCORE_TIME_SPAN_UNSPECIFIED = 'SCORE_TIME_SPAN_UNSPECIFIED'
    ALL_TIME = 'ALL_TIME'
    WEEKLY = 'WEEKLY'
    DAILY = 'DAILY'


class LeaderboardListResponse(BaseModel):
    items: Optional[List[Leaderboard]] = Field(None, description='The leaderboards.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardListResponse`.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token corresponding to the next page of results.'
    )


class LeaderboardScoreRank(BaseModel):
    formattedNumScores: Optional[str] = Field(
        None, description='The number of scores in the leaderboard as a string.'
    )
    formattedRank: Optional[str] = Field(
        None, description='The rank in the leaderboard as a string.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScoreRank`.',
    )
    numScores: Optional[str] = Field(
        None, description='The number of scores in the leaderboard.'
    )
    rank: Optional[str] = Field(None, description='The rank in the leaderboard.')


class FriendStatus(Enum):
    FRIEND_STATUS_UNSPECIFIED = 'FRIEND_STATUS_UNSPECIFIED'
    NO_RELATIONSHIP = 'NO_RELATIONSHIP'
    FRIEND = 'FRIEND'


class Name(BaseModel):
    familyName: Optional[str] = Field(
        None,
        description='The family name of this player. In some places, this is known as the last name.',
    )
    givenName: Optional[str] = Field(
        None,
        description='The given name of this player. In some places, this is known as the first name.',
    )


class AchievementState(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    HIDDEN = 'HIDDEN'
    REVEALED = 'REVEALED'
    UNLOCKED = 'UNLOCKED'


class PlayerAchievement(BaseModel):
    achievementState: Optional[AchievementState] = Field(
        None, description='The state of the achievement.'
    )
    currentSteps: Optional[int] = Field(
        None, description='The current steps for an incremental achievement.'
    )
    experiencePoints: Optional[str] = Field(
        None,
        description='Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished.',
    )
    formattedCurrentStepsString: Optional[str] = Field(
        None,
        description='The current steps for an incremental achievement as a string.',
    )
    id: Optional[str] = Field(None, description='The ID of the achievement.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievement`.',
    )
    lastUpdatedTimestamp: Optional[str] = Field(
        None,
        description="The timestamp of the last modification to this achievement's state.",
    )


class PlayerAchievementListResponse(BaseModel):
    items: Optional[List[PlayerAchievement]] = Field(
        None, description='The achievements.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievementListResponse`.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token corresponding to the next page of results.'
    )


class PlayerEvent(BaseModel):
    definitionId: Optional[str] = Field(
        None, description='The ID of the event definition.'
    )
    formattedNumEvents: Optional[str] = Field(
        None,
        description='The current number of times this event has occurred, as a string. The formatting of this string depends on the configuration of your event in the Play Games Developer Console.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEvent`.',
    )
    numEvents: Optional[str] = Field(
        None, description='The current number of times this event has occurred.'
    )
    playerId: Optional[str] = Field(None, description='The ID of the player.')


class PlayerEventListResponse(BaseModel):
    items: Optional[List[PlayerEvent]] = Field(None, description='The player events.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEventListResponse`.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The pagination token for the next page of results.'
    )


class PlayerLeaderboardScore(BaseModel):
    friendsRank: Optional[LeaderboardScoreRank] = Field(
        None,
        description='The rank of the score in the friends collection for this leaderboard.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScore`.',
    )
    leaderboard_id: Optional[str] = Field(
        None, description='The ID of the leaderboard this score is in.'
    )
    publicRank: Optional[LeaderboardScoreRank] = Field(
        None,
        description='The public rank of the score in this leaderboard. This object will not be present if the user is not sharing their scores publicly.',
    )
    scoreString: Optional[str] = Field(
        None, description='The formatted value of this score.'
    )
    scoreTag: Optional[str] = Field(
        None,
        description='Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.',
    )
    scoreValue: Optional[str] = Field(
        None, description='The numerical value of this score.'
    )
    socialRank: Optional[LeaderboardScoreRank] = Field(
        None, description='The social rank of the score in this leaderboard.'
    )
    timeSpan: Optional[TimeSpan] = Field(
        None, description='The time span of this score.'
    )
    writeTimestamp: Optional[str] = Field(
        None,
        description='The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.',
    )


class PlayerLevel(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLevel`.',
    )
    level: Optional[int] = Field(None, description='The level for the user.')
    maxExperiencePoints: Optional[str] = Field(
        None, description='The maximum experience points for this level.'
    )
    minExperiencePoints: Optional[str] = Field(
        None, description='The minimum experience points for this level.'
    )


class PlayerScore(BaseModel):
    formattedScore: Optional[str] = Field(
        None, description='The formatted score for this player score.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScore`.',
    )
    score: Optional[str] = Field(
        None, description='The numerical value for this player score.'
    )
    scoreTag: Optional[str] = Field(
        None,
        description='Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.',
    )
    timeSpan: Optional[TimeSpan] = Field(
        None, description='The time span for this player score.'
    )


class BeatenScoreTimeSpan(Enum):
    SCORE_TIME_SPAN_UNSPECIFIED = 'SCORE_TIME_SPAN_UNSPECIFIED'
    ALL_TIME = 'ALL_TIME'
    WEEKLY = 'WEEKLY'
    DAILY = 'DAILY'


class PlayerScoreResponse(BaseModel):
    beatenScoreTimeSpans: Optional[List[BeatenScoreTimeSpan]] = Field(
        None,
        description='The time spans where the submitted score is better than the existing score for that time span.',
    )
    formattedScore: Optional[str] = Field(
        None, description='The formatted value of the submitted score.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`.',
    )
    leaderboardId: Optional[str] = Field(
        None, description='The leaderboard ID that this score was submitted to.'
    )
    scoreTag: Optional[str] = Field(
        None,
        description='Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.',
    )
    unbeatenScores: Optional[List[PlayerScore]] = Field(
        None,
        description="The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans.",
    )


class FriendsListVisibility(Enum):
    FRIENDS_LIST_VISIBILITY_UNSPECIFIED = 'FRIENDS_LIST_VISIBILITY_UNSPECIFIED'
    VISIBLE = 'VISIBLE'
    REQUEST_REQUIRED = 'REQUEST_REQUIRED'
    UNAVAILABLE = 'UNAVAILABLE'


class ProfileSettings(BaseModel):
    friendsListVisibility: Optional[FriendsListVisibility] = None
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#profileSettings`.',
    )
    profileVisible: Optional[bool] = Field(
        None,
        description="Whether the player's profile is visible to the currently signed in player.",
    )


class RevisionStatus(Enum):
    REVISION_STATUS_UNSPECIFIED = 'REVISION_STATUS_UNSPECIFIED'
    OK = 'OK'
    DEPRECATED = 'DEPRECATED'
    INVALID = 'INVALID'


class RevisionCheckResponse(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='The version of the API this client revision should use when calling API methods.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#revisionCheckResponse`.',
    )
    revisionStatus: Optional[RevisionStatus] = Field(
        None, description='The result of the revision check.'
    )


class ScopedPlayerIds(BaseModel):
    developerPlayerKey: Optional[str] = Field(
        None,
        description='Identifier of the player across all games of the given developer. Every player has the same developer_player_key in all games of one developer. Developer player key changes for the game if the game is transferred to another developer. Note that game_player_id will stay unchanged.',
    )
    gamePlayerId: Optional[str] = Field(
        None,
        description='Game-scoped player identifier. This is the same id that is returned in GetPlayer game_player_id field.',
    )


class ScoreSubmission(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#scoreSubmission`.',
    )
    leaderboardId: Optional[str] = Field(
        None, description='The leaderboard this score is being submitted to.'
    )
    score: Optional[str] = Field(None, description='The new score being submitted.')
    scoreTag: Optional[str] = Field(
        None,
        description='Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.',
    )
    signature: Optional[str] = Field(
        None,
        description='Signature Values will contain URI-safe characters as defined by section 2.3 of RFC 3986.',
    )


class Type(Enum):
    SNAPSHOT_TYPE_UNSPECIFIED = 'SNAPSHOT_TYPE_UNSPECIFIED'
    SAVE_GAME = 'SAVE_GAME'


class SnapshotImage(BaseModel):
    height: Optional[int] = Field(None, description='The height of the image.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotImage`.',
    )
    mime_type: Optional[str] = Field(None, description='The MIME type of the image.')
    url: Optional[str] = Field(
        None,
        description='The URL of the image. This URL may be invalidated at any time and should not be cached.',
    )
    width: Optional[int] = Field(None, description='The width of the image.')


class StatsResponse(BaseModel):
    avg_session_length_minutes: Optional[float] = Field(
        None,
        description='Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information.',
    )
    churn_probability: Optional[float] = Field(
        None,
        description='The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information.',
    )
    days_since_last_played: Optional[int] = Field(
        None,
        description='Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.',
    )
    high_spender_probability: Optional[float] = Field(
        None,
        description='The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#statsResponse`.',
    )
    num_purchases: Optional[int] = Field(
        None,
        description='Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.',
    )
    num_sessions: Optional[int] = Field(
        None,
        description='The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.',
    )
    num_sessions_percentile: Optional[float] = Field(
        None,
        description='The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.',
    )
    spend_percentile: Optional[float] = Field(
        None,
        description='The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.',
    )
    spend_probability: Optional[float] = Field(
        None,
        description='The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.',
    )
    total_spend_next_28_days: Optional[float] = Field(
        None,
        description='The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class EndPointType(Enum):
    END_POINT_TYPE_UNSPECIFIED = 'END_POINT_TYPE_UNSPECIFIED'
    PROFILE_CREATION = 'PROFILE_CREATION'
    PROFILE_SETTINGS = 'PROFILE_SETTINGS'


class Collection(Enum):
    SCORE_COLLECTION_UNSPECIFIED = 'SCORE_COLLECTION_UNSPECIFIED'
    PUBLIC = 'PUBLIC'
    SOCIAL = 'SOCIAL'
    FRIENDS = 'FRIENDS'


class ApplicationIds(RootModel[List[str]]):
    root: List[str]


class Collection2(Enum):
    CONNECTED = 'CONNECTED'
    VISIBLE = 'VISIBLE'
    FRIENDS_ALL = 'FRIENDS_ALL'


class State(Enum):
    ALL = 'ALL'
    HIDDEN = 'HIDDEN'
    REVEALED = 'REVEALED'
    UNLOCKED = 'UNLOCKED'


class Collection3(Enum):
    COLLECTION_UNSPECIFIED = 'COLLECTION_UNSPECIFIED'
    ALL = 'ALL'


class IncludeRankType(Enum):
    INCLUDE_RANK_TYPE_UNSPECIFIED = 'INCLUDE_RANK_TYPE_UNSPECIFIED'
    ALL = 'ALL'
    PUBLIC = 'PUBLIC'
    SOCIAL = 'SOCIAL'
    FRIENDS = 'FRIENDS'


class TimeSpan7(Enum):
    SCORE_TIME_SPAN_UNSPECIFIED = 'SCORE_TIME_SPAN_UNSPECIFIED'
    ALL = 'ALL'
    ALL_TIME = 'ALL_TIME'
    WEEKLY = 'WEEKLY'
    DAILY = 'DAILY'


class AchievementUpdateMultipleResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleResponse`.',
    )
    updatedAchievements: Optional[List[AchievementUpdateResponse]] = Field(
        None, description='The updated state of the achievements.'
    )


class AchievementUpdateRequest(BaseModel):
    achievementId: Optional[str] = Field(
        None, description='The achievement this update is being applied to.'
    )
    incrementPayload: Optional[GamesAchievementIncrement] = Field(
        None,
        description='The payload if an update of type `INCREMENT` was requested for the achievement.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateRequest`.',
    )
    setStepsAtLeastPayload: Optional[GamesAchievementSetStepsAtLeast] = Field(
        None,
        description='The payload if an update of type `SET_STEPS_AT_LEAST` was requested for the achievement.',
    )
    updateType: Optional[UpdateType] = Field(
        None, description='The type of update being applied.'
    )


class EventBatchRecordFailure(BaseModel):
    failureCause: Optional[FailureCause] = Field(
        None, description='The cause for the update failure.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventBatchRecordFailure`.',
    )
    range: Optional[EventPeriodRange] = Field(
        None,
        description='The time range which was rejected; empty for a request-wide failure.',
    )


class EventPeriodUpdate(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodUpdate`.',
    )
    timePeriod: Optional[EventPeriodRange] = Field(
        None, description='The time period being covered by this update.'
    )
    updates: Optional[List[EventUpdateRequest]] = Field(
        None, description='The updates being made for this time period.'
    )


class EventRecordRequest(BaseModel):
    currentTimeMillis: Optional[str] = Field(
        None,
        description='The current time when this update was sent, in milliseconds, since 1970 UTC (Unix Epoch).',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordRequest`.',
    )
    requestId: Optional[str] = Field(
        None,
        description='The request ID used to identify this attempt to record events.',
    )
    timePeriods: Optional[List[EventPeriodUpdate]] = Field(
        None,
        description='A list of the time period updates being made in this request.',
    )


class EventUpdateResponse(BaseModel):
    batchFailures: Optional[List[EventBatchRecordFailure]] = Field(
        None, description='Any batch-wide failures which occurred applying updates.'
    )
    eventFailures: Optional[List[EventRecordFailure]] = Field(
        None, description='Any failures updating a particular event.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateResponse`.',
    )
    playerEvents: Optional[List[PlayerEvent]] = Field(
        None, description='The current status of any updated events'
    )


class Instance(BaseModel):
    acquisitionUri: Optional[str] = Field(
        None, description='URI which shows where a user can acquire this instance.'
    )
    androidInstance: Optional[InstanceAndroidDetails] = Field(
        None, description='Platform dependent details for Android.'
    )
    iosInstance: Optional[InstanceIosDetails] = Field(
        None, description='Platform dependent details for iOS.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`.',
    )
    name: Optional[str] = Field(None, description='Localized display name.')
    platformType: Optional[PlatformType] = Field(None, description='The platform type.')
    realtimePlay: Optional[bool] = Field(
        None, description='Flag to show if this game instance supports realtime play.'
    )
    turnBasedPlay: Optional[bool] = Field(
        None, description='Flag to show if this game instance supports turn based play.'
    )
    webInstance: Optional[InstanceWebDetails] = Field(
        None, description='Platform dependent details for Web.'
    )


class MetagameConfig(BaseModel):
    currentVersion: Optional[int] = Field(
        None,
        description='Current version of the metagame configuration data. When this data is updated, the version number will be increased by one.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#metagameConfig`.',
    )
    playerLevels: Optional[List[PlayerLevel]] = Field(
        None, description='The list of player levels.'
    )


class PlayerExperienceInfo(BaseModel):
    currentExperiencePoints: Optional[str] = Field(
        None, description='The current number of experience points for the player.'
    )
    currentLevel: Optional[PlayerLevel] = Field(
        None, description='The current level of the player.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerExperienceInfo`.',
    )
    lastLevelUpTimestampMillis: Optional[str] = Field(
        None,
        description='The timestamp when the player was leveled up, in millis since Unix epoch UTC.',
    )
    nextLevel: Optional[PlayerLevel] = Field(
        None,
        description='The next level of the player. If the current level is the maximum level, this should be same as the current level.',
    )


class PlayerScoreListResponse(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreListResponse`.',
    )
    submittedScores: Optional[List[PlayerScoreResponse]] = Field(
        None, description='The score submissions statuses.'
    )


class PlayerScoreSubmissionList(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreSubmissionList`.',
    )
    scores: Optional[List[ScoreSubmission]] = Field(
        None, description='The score submissions.'
    )


class Snapshot(BaseModel):
    coverImage: Optional[SnapshotImage] = Field(
        None,
        description='The cover image of this snapshot. May be absent if there is no image.',
    )
    description: Optional[str] = Field(
        None, description='The description of this snapshot.'
    )
    driveId: Optional[str] = Field(
        None,
        description='The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.',
    )
    durationMillis: Optional[str] = Field(
        None, description='The duration associated with this snapshot, in millis.'
    )
    id: Optional[str] = Field(None, description='The ID of the snapshot.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshot`.',
    )
    lastModifiedMillis: Optional[str] = Field(
        None,
        description='The timestamp (in millis since Unix epoch) of the last modification to this snapshot.',
    )
    progressValue: Optional[str] = Field(
        None,
        description='The progress value (64-bit integer set by developer) associated with this snapshot.',
    )
    title: Optional[str] = Field(None, description='The title of this snapshot.')
    type: Optional[Type] = Field(None, description='The type of this snapshot.')
    uniqueName: Optional[str] = Field(
        None, description='The unique name provided when the snapshot was created.'
    )


class SnapshotListResponse(BaseModel):
    items: Optional[List[Snapshot]] = Field(None, description='The snapshots.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotListResponse`.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token corresponding to the next page of results. If there are no more results, the token is omitted.',
    )


class AchievementUpdateMultipleRequest(BaseModel):
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleRequest`.',
    )
    updates: Optional[List[AchievementUpdateRequest]] = Field(
        None, description='The individual achievement update requests.'
    )


class Application(BaseModel):
    achievement_count: Optional[int] = Field(
        None,
        description='The number of achievements visible to the currently authenticated player.',
    )
    assets: Optional[List[ImageAsset]] = Field(
        None, description='The assets of the application.'
    )
    author: Optional[str] = Field(None, description='The author of the application.')
    category: Optional[ApplicationCategory] = Field(
        None, description='The category of the application.'
    )
    description: Optional[str] = Field(
        None, description='The description of the application.'
    )
    enabledFeatures: Optional[List[EnabledFeature]] = Field(
        None,
        description='A list of features that have been enabled for the application.',
    )
    id: Optional[str] = Field(None, description='The ID of the application.')
    instances: Optional[List[Instance]] = Field(
        None, description='The instances of the application.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#application`.',
    )
    lastUpdatedTimestamp: Optional[str] = Field(
        None, description='The last updated timestamp of the application.'
    )
    leaderboard_count: Optional[int] = Field(
        None,
        description='The number of leaderboards visible to the currently authenticated player.',
    )
    name: Optional[str] = Field(None, description='The name of the application.')
    themeColor: Optional[str] = Field(
        None,
        description='A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. "E0E0E0").',
    )


class Player(BaseModel):
    avatarImageUrl: Optional[str] = Field(
        None, description='The base URL for the image that represents the player.'
    )
    bannerUrlLandscape: Optional[str] = Field(
        None, description='The url to the landscape mode player banner image.'
    )
    bannerUrlPortrait: Optional[str] = Field(
        None, description='The url to the portrait mode player banner image.'
    )
    displayName: Optional[str] = Field(
        None, description='The name to display for the player.'
    )
    experienceInfo: Optional[PlayerExperienceInfo] = Field(
        None,
        description='An object to represent Play Game experience information for the player.',
    )
    friendStatus: Optional[FriendStatus] = Field(
        None,
        description='The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.',
    )
    gamePlayerId: Optional[str] = Field(
        None, description='Per-application unique player identifier.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#player`',
    )
    name: Optional[Name] = Field(
        None, description='A representation of the individual components of the name.'
    )
    originalPlayerId: Optional[str] = Field(
        None,
        description='The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.',
    )
    playerId: Optional[str] = Field(None, description='The ID of the player.')
    profileSettings: Optional[ProfileSettings] = Field(
        None,
        description="The player's profile settings. Controls whether or not the player's profile is visible to other players.",
    )
    title: Optional[str] = Field(
        None, description="The player's title rewarded for their game activities."
    )


class PlayerLeaderboardScoreListResponse(BaseModel):
    items: Optional[List[PlayerLeaderboardScore]] = Field(
        None, description='The leaderboard scores.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScoreListResponse`.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The pagination token for the next page of results.'
    )
    player: Optional[Player] = Field(
        None, description='The Player resources for the owner of this score.'
    )


class PlayerListResponse(BaseModel):
    items: Optional[List[Player]] = Field(None, description='The players.')
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#playerListResponse`.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token corresponding to the next page of results.'
    )


class LeaderboardEntry(BaseModel):
    formattedScore: Optional[str] = Field(
        None, description='The localized string for the numerical value of this score.'
    )
    formattedScoreRank: Optional[str] = Field(
        None,
        description='The localized string for the rank of this score for this leaderboard.',
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardEntry`.',
    )
    player: Optional[Player] = Field(
        None, description='The player who holds this score.'
    )
    scoreRank: Optional[str] = Field(
        None, description='The rank of this score for this leaderboard.'
    )
    scoreTag: Optional[str] = Field(
        None,
        description='Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.',
    )
    scoreValue: Optional[str] = Field(
        None, description='The numerical value of this score.'
    )
    timeSpan: Optional[TimeSpan] = Field(
        None, description='The time span of this high score.'
    )
    writeTimestampMillis: Optional[str] = Field(
        None,
        description='The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.',
    )


class LeaderboardScores(BaseModel):
    items: Optional[List[LeaderboardEntry]] = Field(
        None, description='The scores in the leaderboard.'
    )
    kind: Optional[str] = Field(
        None,
        description='Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScores`.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The pagination token for the next page of results.'
    )
    numScores: Optional[str] = Field(
        None, description='The total number of scores in the leaderboard.'
    )
    playerScore: Optional[LeaderboardEntry] = Field(
        None,
        description="The score of the requesting player on the leaderboard. The player's score may appear both here and in the list of scores above. If you are viewing a public leaderboard and the player is not sharing their gameplay information publicly, the `scoreRank`and `formattedScoreRank` values will not be present.",
    )
    prevPageToken: Optional[str] = Field(
        None, description='The pagination token for the previous page of results.'
    )
